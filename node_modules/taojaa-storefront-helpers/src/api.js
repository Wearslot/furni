const fs = require('fs');
const axios = require('axios');

const getRequiredHeaders = () => {
    return {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.STORE_FRONT_TOKEN ? process.env.STORE_FRONT_TOKEN : process.env.AUTH_SECRET_KEY}`
    }
}

const formatUrl = (endpoint) => {
    var base_url = process.env.TAOJAA_STOREFRONT_API;
    if (endpoint.indexOf('http') == 0) {
        return endpoint;
    }

    return base_url + endpoint;
}

async function apiGet(url, headers = {}) {
    try {
        return await axios.get(formatUrl(url), { headers: { ...getRequiredHeaders(), ...headers } });
    } catch (error) {
        throw error;
    }
}

async function apiPost(url, payload, headers = {}) {
    try {
        return await axios.post(formatUrl(url), payload, { headers: { ...getRequiredHeaders(), ...headers } });
    } catch (error) {
        throw error;
    }
}

async function apiPut(url, payload, headers = {}) {
    try {
        return await axios.put(formatUrl(url), payload, { headers: { ...getRequiredHeaders(), ...headers } });
    } catch (error) {
        throw error;
    }
}

async function apiPatch(url, payload, headers = {}) {
    try {
        return await axios.patch(formatUrl(url), payload, { headers: { ...getRequiredHeaders(), ...headers } });
    } catch (error) {
        throw error;
    }
}

async function apiDelete(url, headers = {}) {
    try {
        return await axios.delete(formatUrl(url), { headers: { ...getRequiredHeaders(), ...headers } });
    } catch (error) {
        throw error;
    }
}

const fetchData = async (key, query, request) => {

    var response = null,
        querySurfix = '';

    if (typeof query === "object") {
        querySurfix = `&page=${request.query.page || 1}&${query.pagination.per_page !== undefined ? `&per_page=${query.pagination.per_page}` : ''}`;
    }

    if (request.params.slug) {
        querySurfix = `&collection=${request.params.slug}`;
    }

    if (request.query.keywords) {
        querySurfix = `&search=${request.query.keywords}`;
    }

    switch (key) {
        case 'banners':
            response = await apiGet(`/${request.store.store_id}/banners${querySurfix.replace('&', '?')}`);
            break;

        case 'products':
            response = await apiGet(`/${request.store.store_id}/products?currency=${request.cookies.currency}${querySurfix}`);
            break;

        case 'featured_products':
            response = await apiGet(`/${request.store.store_id}/products?currency=${request.cookies.currency}&is_featured=true${querySurfix}`);
            break;

        case 'collections':
            response = await apiGet(`/${request.store.store_id}/collections${querySurfix.replace('&', '?')}`)
            break;

        case 'featured_collections':
            response = await apiGet(`/${request.store.store_id}/collections?featured=true${querySurfix}`)
            break;

        case 'customer_orders':
            response = await apiGet(`/${request.store.store_id}/customer/orders${querySurfix.replace('&', '?')}`, {
                'session_token': request.cookies.customerToken
            });
            break;

        default:
            break;
    }

    return response.data;
}


const resolveDataRequest = async (template, request) => {

    var dataBank = {};

    const settings = JSON.parse(fs.readFileSync(`${process.env.THEME_BASE_PATH}templates/${template}.json`, 'utf8'));

    if (settings.data !== undefined) {
        for (const key in settings.data) {
            const query = settings.data[key];
            const dataRequest = await fetchData(key, query, request);
            if (dataRequest !== null) {
                if (dataRequest.pagination !== undefined) {
                    dataBank[key] = {
                        data: dataRequest.data,
                        pagination: dataRequest.pagination
                    };
                } else {
                    dataBank[key] = dataRequest.data;
                }
            }
        }
    }

    return dataBank;
}


module.exports = {
    apiGet, apiPost, apiPatch, apiPut, apiDelete, resolveDataRequest
}