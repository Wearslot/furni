const { apiPatch, apiGet } = require('taojaa-storefront-helpers/src/api');

const storeMiddleware = async (request, response, next) => {
    try {

        var storeFrontToken = request.cookies._sys_atj;

        if (request.query.key && request.query.key !== 'undefined') {
            storeFrontToken = request.query.key;
            response.cookie('_sys_atj', request.query.key);
        }

        const domain = process.env.STORE_DOMAIN || request.get('host')
        var fullUrl = request.protocol + '://' + request.get('host') + request.originalUrl.split("?").shift();

        const store = await apiGet(`/store?domain=${domain}`);

        if (store.data.data.store_type === "development") {
            process.env['STORE_FRONT_TOKEN'] = storeFrontToken || '';
        } else {
            delete process.env.STORE_FRONT_TOKEN;
        }

        if (!request.cookies['currency']) {
            response.cookie('currency', 'default');
            request.cookies['currency'] = 'default';
        }

        if (request.query.currency) {
            response.cookie('currency', request.query.currency);

            // update cart currency
            if (request.cookies.cart_id) {
                const store_id = store.data.data.store_id;
                await apiPatch(`/${store_id}/cart/update/currency`, {
                    cart_id: request.cookies.cart_id,
                    currency: request.query.currency
                });
            }

            return response.redirect(fullUrl)
        }

        request.currency = store.data.data.currencies[request.cookies.currency];
        request.store = store.data.data;

        response.data = {
            store: request.store,
            currency: request.currency,
            year: new Date().getFullYear(),
        };

        for (const key in request.session) {
            if (key == 'errors') {
                response.data[key] = JSON.parse(request.session[key]);
            } else {
                response.data[key] = request.session[key];
            }
            request.session[key] = undefined;
        }

        return next();

    } catch (error) {
        return response.errorHandler(error, request, response, next);
    }
}

module.exports = storeMiddleware;