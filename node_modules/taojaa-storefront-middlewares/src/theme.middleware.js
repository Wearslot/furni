const fs = require('fs');
const { getBasePath, getAssetURL } = require('taojaa-storefront-helpers');
const { apiGet } = require('taojaa-storefront-helpers/src/api');
const { renderUtilsPage } = require('taojaa-storefront-helpers/src/utils');

const themeMiddleware = async (request, response, next) => {

    try {

        var theme;
        if (request.query.theme_id) {

            const previewTheme = await apiGet(`/${request.store.store_id}/themes/${request.query.theme_id}`);
            if (previewTheme.data.status === 'success') {
                theme = previewTheme.data.data;
            }

        } else {
            theme = request.store.theme;
        }

        if (!theme) {
            return response.send(renderUtilsPage('under-construction', { store: request.store }));
        }

        delete request.store.theme;

        // Cart
        var cart = {
            items_count: 0,
            email: null,
            id: request.cookies.cart_id,
            currency: request.store.currencies[request.cookies.currency].code,
            items: [],
            total_price: 0,
            subtotal_price: 0,
            discount_applied: false,
            discount: {
                coupon_code: null,
                amount: 0
            },
            requires_shipping: true,
            shipping_address: null,
            shipping_method: null,
            shipping_method_option: null,
            shipping_fee: 0
        };

        if (request.cookies.cart_id) {
            const getCart = await apiGet(`/${request.store.store_id}/cart/${request.cookies.cart_id}`);
            cart = getCart.data

            if (cart.shipping_address?.country) {
                const getStates = await apiGet(`/utils/states/${cart.shipping_address.country}?domain=${process.env.STORE_DOMAIN || request.get('host')}`);
                response.data.states = getStates.data.data;
            }
        }

        response.data.cart = cart;

        // Get Colletions
        const collections = await apiGet(`/${request.store.store_id}/collections`);
        response.data.store.collections = collections.data.data;

        // Get Navigations
        const navigations = await apiGet(`/${request.store.store_id}/navigations`);
        response.data.store.navigations = navigations.data.data;

        // Get Countries
        const countries = await apiGet(`/countries?domain=${process.env.STORE_DOMAIN || request.get('host')}`);
        response.data.countries = countries.data.data;

        // Get Currencies
        const currencies = await apiGet(`/currencies?domain=${process.env.STORE_DOMAIN || request.get('host')}`);
        response.data.currencies = currencies.data.currencies;

        var base_url = (request.headers['x-forwarded-proto'] || 'http') + '://' + request.get('host');

        process.env['THEME_BASE_PATH'] = getBasePath({ store: response.data.store, theme });
        process.env['THEME_ASSET_URL'] = getAssetURL({ base_url, theme, store: response.data.store });

        response.data.asset_url = process.env.THEME_ASSET_URL;

        const settings = JSON.parse(fs.readFileSync(`${process.env.THEME_BASE_PATH}configs/settings.json`, 'utf8'))
        response.data.settings = settings.custom || settings.preset;

        if (request.query.editor_mode) {
            process.env['THEME_EDITOR_MODE'] = true;
        } else {
            delete process.env.THEME_EDITOR_MODE;
        }

        next();
    } catch (error) {
        return response.errorHandler(error, request, response, next);
    }
}


module.exports = themeMiddleware;